
===============================
How to use 2-matrix_divided.py
===============================

The function divides a matrix by a divisor and returns a new matrix of result

Usage
====
Function ``matrix_divided(matrix, div)`` returns a new matrix[[]] of result
elements are rounded to 2 d.p
matrix could only contain int or float
 
::
	>>> matrix_divided = __import__('2-matrix_divided').matrix_divided
	>>> matrix = [
	...	[1, 2, 3],
	...	[4, 5, 6]
	...	]
	>>> print(matrix_divided(matrix, 3))
	[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

::
	>>> matrix = [
	...	[24, 9, 12],
	...	[1, 6, 5]
	...	]
	>>> print(matrix_divided(matrix, 3))
	[[8.0, 3.0, 4.0], [0.33, 2.0, 1.67]]

Original matrix is not affected

::
	>>> print(matrix)
	[[24, 9, 12], [1, 6, 5]]

Handles float

::
	>>> matrix = [
	...	[4.4, -6.6, 1.1],
	...	[3.3, -2.2, 5.5]
	...	]
	>>> print(matrix_divided(matrix, 3))
	[[1.47, -2.2, 0.37], [1.1, -0.73, 1.83]]

Float and int together works fine

::
	>>> matrix = [
	...	[4.4, 6, -6.6],
	...	[-3.3, 9.999, 5.5]
	...	]
	>>> print(matrix_divided(matrix, 3))
	[[1.47, 2.0, -2.2], [-1.1, 3.33, 1.83]]


Checkout Errors with matrix
===========================

::
	>>> matrix = [
	...	["ho", 3, 5],
	...	[7, "ot", 4]
	...	]
	>>> print(matrix_divided(matrix, 3))
	Traceback (most recent call last):
	TypeError: matrix must be a matrix (list of lists) of integers/floats

::
	>>> matrix = "a string"
	>>> print(matrix_divided(matrix, 3))
	Traceback (most recent call last):
	TypeError: matrix must be a matrix (list of lists) of integers/floats

A single list is wrong

::
	>>> matrix = []
	>>> print(matrix_divided(matrix, 3))
	Traceback (most recent call last):
	TypeError: matrix must be a matrix (list of lists) of integers/floats

::
	>>> matrix = None
	>>> print(matrix_divided(matrix, 3))
	Traceback (most recent call last):
	TypeError: matrix must be a matrix (list of lists) of integers/floats

An empty list of list is right

::
	>>> matrix = [[]]
	>>> print(matrix_divided(matrix, 3))
	[[]]

::
	>>> matrix = [3, 2, 6]
	>>> print(matrix_divided(matrix, 3))
	Traceback (most recent call last):
	TypeError: matrix must be a matrix (list of lists) of integers/floats

If the list are not of equal length (wrong)

::
	>>> matrix = [
	...	[3, 7, 8],
	...	[2.2, 3, 6, 7]
	...	]
	>>> print(matrix_divided(matrix, 3))
	Traceback (most recent call last):
	TypeError: Each row of the matrix must have the same size


Error on Divisor
===============

divisor can't be zero

::
	>>> matrix = [
	...	[3, 5, 7],
	...	[2, 8, 1]
	...	]
	>>> print(matrix_divided(matrix, 0))
	Traceback (most recent call last):
	ZeroDivisionError: division by zero

divisor must be int or float

::
	>>> matrix = [
	...	[1, 5, 3],
	...	[6, 8, 4]
	...	]
	>>> print(matrix_divided(matrix, "hi"))
	Traceback (most recent call last):
	TypeError: div must be a number

::
	>>> matrix = [
	...	[2, 4, 6],
	...	[4, 7, 2]
	...	]
	>>> print(matrix_divided(matrix, [5, 4]))
	Traceback (most recent call last):
	TypeError: div must be a number

	>>> print(matrix_divided(matrix, None))
	Traceback (most recent call last):
	TypeError: div must be a number

::
	>>> matrix = "check"
	>>> print(matrix_divided(matrix, None))
	Traceback (most recent call last):
	TypeError: matrix must be a matrix (list of lists) of integers/floats
